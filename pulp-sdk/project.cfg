import plpproject as plp
import os

ProjectConfig = c = {}

if os.environ.get('PULP_GITHUB_SSH') is None:
  github = 'https://github.com/'
else:
  github = 'git@github.com:'

build_autotiler = os.environ.get('GWT_AUTOTILER') is not None
build_pmsis_kernels = os.environ.get('PMSIS_KERNELS') is not None

#
# MODULES
#

json_tools = plp.Module(
  name  = 'json-tools',
  path  = 'json-tools',
  deps  = [],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build', 'make all install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_configs = plp.Module(
  name  = 'pulp-configs',
  path  = 'pulp-configs',
  deps  = [],
  steps = [
    plp.BuildStep('clean', 'scons -c -Q'),
    plp.BuildStep('build', 'scons -Q'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_tools = plp.Module(
  name  = 'pulp-tools',
  path  = 'pulp-tools',
  deps  = [json_tools, pulp_configs],
  steps = [
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build', 'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

plptest = plp.Module(
  name  = 'plptest',
  path  = 'plptest',
  deps  = [json_tools, pulp_configs],
  steps = [
    plp.BuildStep('build', 'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

rules = plp.Module(
  name  = 'pulp-rules',
  url   = github + 'pulp-platform/pulp-rules.git',
  path  = 'tools/pulp-rules',
  deps  = [pulp_tools],
  steps = [
    plp.BuildStep('prepare', 'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

runner = plp.Module(
  name  = 'runner',
  url   = github + 'pulp-platform/runner.git',
  path  = 'tools/runner',
  steps = [
    plp.BuildStep('build', 'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)





pmsis = plp.Module(
  name  = 'pmsis_api',
  url   = github + 'GreenWaves-Technologies/pmsis_api.git',
  path  = 'runtime/pmsis_api',
  steps = [
    plp.BuildStep('prepare', 'make -f tools/export.mk build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)


archi = plp.Module(
  name  = 'archi',
  url   = github + 'pulp-platform/archi.git',
  path  = 'runtime/archi',
  deps  = [rules, pulp_configs],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make build'),
  ],
  parameters = ['**/chip/name', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

archi_host = plp.Module(
  name  = 'archi-host',
  url   = github + 'pulp-platform/archi-host.git',
  path  = 'runtime/archi-host',
  deps  = [rules],  # `pulp_rt` is also a dependency, but this would result in a dependency circle,
                    # which the SDK currently cannot resolve.  Thus, you have to manually ensure
                    # that the headers of `pulp_rt` are installed before this module is compiled.
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict='(config.get_str("**/chip/name").find("bigpulp") != -1 or config.get_str("**/chip/name").find("hero") != -1) and config.get_str("**/chip/name") not in "bigpulp-standalone"'
)

archi_analog = plp.Module(
  name  = 'archi-analog',
  url   = 'git@iis-git.ee.ethz.ch:vivosoc/archi_analog.git',
  path  = 'runtime/archi-analog',
  deps  = [rules, pulp_configs],
  restrict   = "config.get_str('**/chip/name').find('vivosoc') != -1",
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
  ],
  parameters = ['**/chip/name', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

vivosoc3_tools = plp.Module(
  name  = 'vivosoc3-tools',
  url   = 'git@iis-git.ee.ethz.ch:VivoGroup/vivosoc3-tools.git',
  path  = 'tools/vivosoc3-tools',
  deps  = [rules],
  restrict   = "config.get_str('**/chip/name').find('vivosoc3') != -1",
  steps = [
    plp.BuildStep('build', 'make copy'),
  ],
  parameters = ['**/chip/name', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

hal_analog = plp.Module(
  name  = 'hal-analog',
  url   = 'git@iis-git.ee.ethz.ch:vivosoc/hal_analog.git',
  path  = 'runtime/hal-analog',
  deps  = [rules, pulp_configs],
  restrict   = "config.get_str('**/chip/name').find('vivosoc') != -1",
  steps = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
  ],
  parameters = ['**/chip/name', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_debug_bridge = plp.Module(
  name  = 'pulp-debug-bridge',
  url   = github + 'pulp-platform/pulp-debug-bridge.git',
  path  = 'tools/pulp-debug-bridge',
  deps  = [json_tools, pulp_configs],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make all install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt_bridge = plp.Module(
  name  = 'pulp-rt-bridge',
  url   = github + 'pulp-platform/pulp-rt-bridge.git',
  path  = 'tools/pulp-rt-bridge',
  deps  = [json_tools, pulp_configs, pulp_debug_bridge],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make all install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

hal = plp.Module(
  name  = 'hal',
  url   = github + 'pulp-platform/hal.git',
  path  = 'runtime/hal',
  deps  = [rules, pulp_debug_bridge, pulp_configs, pulp_tools],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make build'),
  ],
  parameters = ['**/chip/name', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_rt_deps = [rules, archi, archi_analog, hal_analog, hal, archi_host, pmsis]

pulp_rt = plp.Module(
  name       = 'pulp-rt',
  url        = github + 'pulp-platform/pulp-rt.git',
  path       = 'runtime/pulp-rt',
  deps       = pulp_rt_deps,
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean_all'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build_all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pmsis_bsp = plp.Module(
  name       = 'pmsis_bsp',
  url        = github + 'GreenWaves-Technologies/pmsis_bsp.git',
  path       = 'runtime/pmsis_bsp',
  deps       = [ pulp_rt ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean PULPOS=1 SRC=1'),
    plp.BuildStep('prepare', 'make header PULPOS=1 SRC=1'),
    plp.BuildStep('build',   'make all PULPOS=1 SRC=1'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get_str('**/chip/name') in ['gap', 'gap_rev1', 'gap8_revc', 'wolfe', 'vega', 'gap9']"
)

pmsis_tools = plp.Module(
  name       = 'pmsis_tools',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/pmsis_tools.git',
  path       = 'libs/pmsis_tools',
  deps       = [ pmsis_bsp ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean PULPOS=1 SRC=1'),
    plp.BuildStep('prepare', 'make header PULPOS=1 SRC=1'),
    plp.BuildStep('build',   'make all PULPOS=1 SRC=1'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get_str('**/chip/name').find('gap') != -1"
)

pmsis_kernels = plp.Module(
  name       = 'pmsis_kernels',
  url        = 'git@gitlab.greenwaves-tech.com:gwt_sdk_developer/pmsis_kernels.git',
  path       = 'libs/pmsis_kernels',
  deps       = [ pmsis_bsp ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean PULPOS=1'),
    plp.BuildStep('prepare', 'make header PULPOS=1'),
    plp.BuildStep('build',   'make all PULPOS=1'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get_str('**/chip/name').find('gap') != -1"
)

pulp_rt_analog = plp.Module(
  name       = 'pulp-rt-analog',
  url        = 'git@iis-git.ee.ethz.ch:vivosoc/pulp-rt_analog.git',
  path       = 'runtime/pulp-rt-analog',
  deps       = [ archi_analog, hal_analog, pulp_rt],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  restrict   = "config.get_str('**/chip/name').find('vivosoc') != -1",
  steps      = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

flasher = plp.Module(
  name       = 'flasher',
  url        = github + 'pulp-platform/flasher.git',
  path       = 'tools/flasher',
  deps       = [ pulp_rt, pulp_rt_analog, pmsis_bsp ],
  parameters = ['**/chip/name', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make fullclean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pc_analyzer = plp.Module(
  name  = 'pc_analyzer',
  url   = 'git@iis-git.ee.ethz.ch:pulp-tools/pc_analyzer.git',
  path  = 'tools/pc_analyzer',
  restrict   = "config.get_str('**/chip/name').find('pulpissimo') == -1 and config.get_str('**/chip/name') != 'pulp'",
  steps = [
    plp.BuildStep('build',   'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)


dpi_models = plp.Module(
  name  = 'dpi-models',
  url   = github + 'pulp-platform/dpi-models.git',
  path  = 'platform/dpi_models',
  deps  = [json_tools, pulp_debug_bridge, pulp_configs ],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout',   'make checkout'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

vp = plp.Module(
  name  = 'gvsoc',
  url   = github + 'pulp-platform/gvsoc.git',
  path  = 'platform/gvsoc',
  deps  = [ archi, dpi_models, json_tools, pulp_configs ],
  parameters = ['**/chip/name', '**/install_name'],
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build'),
    plp.BuildStep('checkout',   'make checkout'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

libgomp = plp.Module(
  name       = 'libgomp',
  url        = github + 'pulp-platform/pulp-libgomp.git',
  path       = 'runtime/libgomp',
  deps       = [pulp_rt],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") not in ["vivosoc2", "vivosoc2_1", "fulmine", "honey", "pulpissimo", "pulpissimo_v1", "pulp", "pulp_v1"]'
)

libvmm = plp.Module(
  name       = 'libvmm',
  url        = github + 'pulp-platform/libvmm.git',
  path       = 'runtime/libvmm',
  deps       = [pulp_rt, archi_host],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict='(config.get_str("**/chip/name").find("bigpulp") != -1 or config.get_str("**/chip/name").find("hero") != -1) and config.get_str("**/chip/name") not in ["bigpulp-standalone"]'
)

boot_code = plp.Module(
  name       = 'boot_code',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get("**/rom") is not None and config.get_str("**/chip/name") in  ["vivosoc3"]'
)

boot_code_pulp_v1 = plp.Module(
  name       = 'boot_code_pulp_v1',
  url        = github + 'pulp-platform/boot-code.git',
  path       = 'runtime/boot_code_pulp_v1',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") in  ["pulp_v1", "pulpissimo_v1"]'
)

boot_code_pulp = plp.Module(
  name       = 'boot_code_pulp',
  url        = github + 'pulp-platform/boot-code.git',
  path       = 'runtime/boot_code_pulp',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") in  ["pulp"]'
)

boot_code_pulpissimo = plp.Module(
  name       = 'boot_code_pulpissimo',
  url        = github + 'pulp-platform/boot-code.git',
  path       = 'runtime/boot_code_pulpissimo',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") in  ["pulpissimo"]'
)

boot_code_wolfe = plp.Module(
  name       = 'boot_code_wolfe',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_wolfe',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "wolfe" '
)

boot_code_gap = plp.Module(
  name       = 'boot_code_gap',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_gap',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "gap" '
)

boot_code_gap_rev1 = plp.Module(
  name       = 'boot_code_gap_rev1',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_gap_rev1',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "gap_rev1" '
)

boot_code_gap8_revc = plp.Module(
  name       = 'boot_code_gap8_revc',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_gap8_revc',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "gap8_revc" '
)

boot_code_arnold = plp.Module(
  name       = 'boot_code_arnold',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_arnold',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "arnold" '
)

boot_code_vega = plp.Module(
  name       = 'boot_code_vega',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_vega',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build_all'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "vega" '
)

boot_code_vivosoc3_1 = plp.Module(
  name       = 'boot_code_vivosoc3_1',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_vivosoc3_1',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build_all'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "vivosoc3_1" '
)

boot_code_multino = plp.Module(
  name       = 'boot_code_multino',
  url        = 'git@iis-git.ee.ethz.ch:pulp-sw/boot_code_new.git',
  path       = 'runtime/boot_code_multino',
  deps       = [rules, archi, hal, pulp_rt],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   'make build install'),
  ],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = 'config.get_str("**/chip/name") == "multino" '
)

plplib = plp.Module(
  name       = 'plplib',
  url        = 'git@iis-git.ee.ethz.ch:pulp-apps/plplib.git',
  path       = 'libs/plplib',
  deps       = [pulp_rt],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('prepare', 'make header'),
    plp.BuildStep('build',   'make build install'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get_str('**/chip/name') not in ['gap', 'pulpissimo', 'pulpissimo_v1', 'pulp', 'pulp_v1']"
)

oprecomp_capi = plp.Module(
  name       = 'oprecomp_capi',
  url        = 'git@iis-git.ee.ethz.ch:oprecomp/oprecomp.git',
  path       = 'runtime/oprecomp_capi',
  deps       = [vp, pulp_rt],
  parameters = ['**/chip/name', '**/pulp_compiler', '**/pulp_rt_version', '**/chip/version', '**/install_name'],
  steps      = [
    plp.BuildStep('clean',   'make -C kw clean'),
    plp.BuildStep('build',   'make -C kw all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get_str('**/chip/name') in [ 'oprecompkw', 'oprecompkw_sfloat' ]"
)



auto_tiler = plp.Module(
  name  = 'auto-tiler',
  url   = 'https://github.com/GreenWaves-Technologies/autotiler.git',
  path  = 'tools/auto-tiler',
  steps = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('build',   '../../scripts/build-autotiler'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  },
  restrict   = "config.get_str('**/chip/name') == 'gap' or config.get_str('**/chip/name') == 'gap_rev1' or config.get_str('**/chip/name') == 'gap8_revc'"
)



sdk_install = plp.Module(
  name       = 'sdk_install',
  path       = 'install',
  deps       = [pulp_tools],
  steps      = [
    plp.BuildStep('build',   'make all'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

doc = plp.Module(
  name       = 'doc',
  url        = github + 'pulp-platform/pulp-sdk-doc.git',
  path       = 'doc',
  deps       = [pulp_rt],
  steps      = [
    plp.BuildStep('build',   'make all'),
  ],
  parameters = ['**/chip/name'],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

hw_doc = plp.Module(
  name       = 'hw_doc',
  url        = 'git@iis-git.ee.ethz.ch:pulp-restricted/hw-doc.git',
  path       = 'misc/hw_doc',
  restrict   = "config.get_str('**/chip/name').find('pulpissimo') == -1 and config.get_str('**/chip/name') != 'pulp'",
  deps       = [],
  steps      = [
    plp.BuildStep('build',   'make build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

or10nv2_gcc = plp.Module(
  name  = 'or10nv2_gcc',
  url   = 'git@iis-git.ee.ethz.ch:pulp/or1k-gcc-toolchain-wrapper.git',
  path  = 'tools/or10nv2_gcc',
  steps = [
    plp.BuildStep('clean',   'make sdk.clean'),
    plp.BuildStep('prepare', 'make sdk.header'),
    plp.BuildStep('build',   'make sdk.build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

riscv_gcc = plp.Module(
  name  = 'riscv_gcc',
  url   = 'git@iis-git.ee.ethz.ch:pulp-tools/riscv-pulp-gnu-toolchain.git',
  path  = 'tools/riscv_gcc',
  steps = [
    plp.BuildStep('build',   'make build RISCVV0=1'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

pulp_riscv_gcc = plp.Module(
  name  = 'pulp_riscv_gcc',
  url   = github + 'pulp-platform/pulp-riscv-gnu-toolchain.git',
  path  = 'tools/pulp-riscv-gcc',
  steps = [
    plp.BuildStep('checkout','make -f Makefile.pulp checkout'),
    plp.BuildStep('build',   'make -f Makefile.pulp build'),
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

openocd = plp.Module(
  name  = 'openocd',
  url   = github + 'riscv/riscv-openocd.git',
  path  = 'tools/riscv-openocd',
  steps = [
    plp.BuildStep('checkout',   '../../scripts/checkout-openocd'),
    plp.BuildStep('build',   '../../scripts/build-openocd')
  ],
  env   = {
    'BUILD_DIR' : 'os.path.join(self.get_build_dir())',
  }
)

quentin = plp.Module(
  name       = 'quentin',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/quentin.git',
  path       = 'rtl/quentin',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

pulpissimo = plp.Module(
  name       = 'pulpissimo',
  url        = github + 'pulp-platform/pulpissimo.git',
  path       = 'rtl/pulpissimo',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

pulpissimo_ibex = plp.Module(
  name       = 'pulpissimo_ibex',
  url        = github + 'pulp-platform/pulpissimo.git',
  path       = 'rtl/pulpissimo_ibex',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

pulpissimo_v1 = plp.Module(
  name       = 'pulpissimo_v1',
  url        = github + 'pulp-platform/pulpissimo.git',
  path       = 'rtl/pulpissimo_v1',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

multino = plp.Module(
  name       = 'multino',
  url        = 'git@iis-git.ee.ethz.ch:akurth/multino',
  path       = 'rtl/multino',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
) 

pulp = plp.Module(
  name       = 'pulp',
  url        = github + 'pulp-platform/pulp.git',
  path       = 'rtl/pulp',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

pulp_v1 = plp.Module(
  name       = 'pulp_v1',
  url        = github + 'pulp-platform/pulp.git',
  path       = 'rtl/pulp_v1',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

wolfe = plp.Module(
  name       = 'wolfe',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/mr-wolf.git',
  path       = 'rtl/wolfe',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

arnold = plp.Module(
  name       = 'arnold',
  url        = 'git@iis-git.ee.ethz.ch:quicklogic/arnold.git',
  path       = 'rtl/arnold',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

devchip = plp.Module(
  name       = 'devchip',
  url        = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/nextGAP.git',
  path       = 'rtl/devchip',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

vega = plp.Module(
  name       = 'vega',
  url        = 'git@iis-git.ee.ethz.ch:pulp-restricted/vincent_vega.git',
  path       = 'rtl/vega',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install_rtl'),
  ]
)

gap9 = plp.Module(
  name       = 'gap9',
  url        = 'git@gitlab.greenwaves-tech.com:gwt_hw_developer_restricted/gap9.git',
  path       = 'rtl/gap9',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install_rtl'),
  ]
)

gap = plp.Module(
  name       = 'gap',
  url        = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/GAP.git',
  path       = 'rtl/gap',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make install_pre build install_post install'),
  ]
)

gap_rev1 = plp.Module(
  name       = 'gap_rev1',
  url        = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/GAP.git',
  path       = 'rtl/gap_rev1',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make install_pre build install_post install'),
  ]
)

gap8_revc = plp.Module(
  name       = 'gap8_revc',
  url        = 'git@iis-git.ee.ethz.ch:greenwaves-technologies/GAP.git',
  path       = 'rtl/gap8_revc',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make install_pre build install_post install'),
  ]
)

fulmine = plp.Module(
  name       = 'fulmine',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/fulmine.git',
  path       = 'rtl/fulmine',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)

vivosoc2 = plp.Module(
  name       = 'vivosoc2',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/vivosoc2-fulmine.git',
  path       = 'rtl/vivosoc2',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build'),
  ]
)

honey = plp.Module(
  name       = 'honey',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/honey.git',
  path       = 'rtl/honey',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build'),
  ]
)

vivosoc3 = plp.Module(
  name       = 'vivosoc3',
  url        = 'git@iis-git.ee.ethz.ch:pulp-platform/vivosoc3.git',
  path       = 'rtl/vivosoc3',
  deps       = [],
  steps      = [
    plp.BuildStep('clean',   'make clean'),
    plp.BuildStep('checkout','make checkout'),
    plp.BuildStep('build',   'make build install'),
  ]
)



riscv_tests = plp.Module(
  name     = 'riscv_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/riscv_tests.git',
  path     = 'tests/riscv_tests',
  testsets = ['testset.cfg']
)

generic_riscv_tests = plp.Module(
  name     = 'generic_riscv_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/riscv-tests.git',
  path     = 'tests/generic_riscv_tests',
  steps      = [
    plp.BuildStep('checkout','git submodule update --init')
  ]
)

sequential_bare_tests = plp.Module(
  name     = 'sequential_bare_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/sequential_bare_tests.git',
  path     = 'tests/sequential_bare_tests',
  testsets = ['testset.cfg']
)

parallel_bare_tests = plp.Module(
  name     = 'parallel_bare_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/parallel_bare_tests.git',
  path     = 'tests/parallel_bare_tests',
  testsets = ['testset.cfg']
)

rt_tests = plp.Module(
  name     = 'rt-tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/rt-tests.git',
  path     = 'tests/rt-tests',
  testsets = ['testset.cfg']
)

pmsis_tests = plp.Module(
  name     = 'pmsis_tests',
  url      = 'git@github.com:GreenWaves-Technologies/pmsis_tests.git',
  path     = 'tests/pmsis_tests',
  testsets = ['testset.cfg']
)


bsp_tests = plp.Module(
  name       = 'bsp-tests',
  url        = 'git@github.com:GreenWaves-Technologies/pmsis_bsp_tests.git',
  path       = 'tests/bsp-tests',
  testsets = ['testset.cfg']
)

oprecomp_tests = plp.Module(
  name     = 'oprecomp-tests',
  url      = 'git@iis-git.ee.ethz.ch:oprecomp/oprecomp.git',
  path     = 'tests/oprecomp-tests',
  testsets = ['testset.cfg'],
  restrict   = "config.get_str('**/chip/name').find('oprecompkw') != -1"
)

rt_examples = plp.Module(
  name     = 'pulp-rt-examples',
  url      = github + 'pulp-platform/pulp-rt-examples.git',
  path     = 'examples/pulp-rt-examples',
  testsets = ['testset.cfg']
)

pulp_tests = plp.Module(
  name     = 'pulp_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-sw/pulp_tests.git',
  path     = 'tests/pulp_tests',
  testsets = ['testset.cfg']
)

ml_tests = plp.Module(
  name     = 'ml_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-tests/ml_tests.git',
  path     = 'tests/ml_tests',
  testsets = ['testset.cfg']
)

gomp_tests = plp.Module(
  name     = 'gomp_tests',
  url      = 'git@iis-git.ee.ethz.ch:pulp-apps/gomp_tests.git',
  path     = 'apps/gomp_tests',
  #testsets = ['testset.cfg']
)



gap_sdk_examples = plp.Module(
  name     = 'gap_sdk_examples',
  url      = 'git@github.com:GreenWaves-Technologies/gap_sdk.git',
  path     = 'examples/gap_sdk_examples',
  restrict   = "config.get_str('**/chip/name') == 'gap'"
)



#
# GROUPS
#

tools_modules    = [pulp_tools, pulp_configs, plptest]
examples_modules = [  ]
runtime_modules  = [
  pulp_tools, pulp_configs, rules, json_tools, pulp_debug_bridge, pulp_rt_bridge, archi, archi_host, archi_analog, vivosoc3_tools, hal_analog, hal, boot_code, boot_code_pulp, boot_code_pulp_v1, boot_code_pulpissimo, boot_code_arnold, boot_code_vega, boot_code_multino, pulp_rt, pmsis_bsp, pulp_rt_analog, flasher, libgomp, libvmm, oprecomp_capi, runner, boot_code_gap8_revc
]

if build_pmsis_kernels:
  runtime_modules += [ pmsis_kernels, pmsis_tools ]

if build_autotiler:
  tools_modules    += [ auto_tiler ]
  examples_modules += [ gap_sdk_examples ]

runtime_modules.append(pmsis)

platform = plp.Group('platform', [pulp_tools, pulp_configs, rules, archi, vp, json_tools, pulp_debug_bridge, pulp_rt_bridge, dpi_models, runner] )
runtime  = plp.Group('runtime',  runtime_modules )
tools    = plp.Group('tools',  tools_modules )
pkg      = plp.Group('pkg',  [doc, sdk_install] )
libs     = plp.Group('libs',  [] )
examples = plp.Group('examples', examples_modules )


#boot_code_wolfe, boot_code_vivosoc3_1, boot_code_gap, boot_code_gap_rev1, boot_code_gap8_revc
#'boot_code_gap': '529f37ff8c0acbed7aa93d5fd8baf8012fcb163c',
#'boot_code_gap_rev1': '80b663d38e21fa4d0c7cf147fef68079e9c77158',
#'boot_code_wolfe': '0728581f6803c5e23619a935bc8594577eb33dde',
#'boot_code_vivosoc3_1': '6201c2319e520639e78ffb6e9557df3aa83377ff',


#
# PACKAGES
#

or10nv2_gcc = plp.Package(
  name       = 'or10nv2_gcc',
  path       = 'or10nv2_gcc',
  modules    = [ or10nv2_gcc ],
  artifact   = True,
  restrict   = "config.get_str('**/pulp_compiler') == 'gcc' and (config.get_str('**/fc/version') == 'or10nv2' or config.get_str('**/pe/version') == 'or10nv2')",
  env        = { 'OR10NV2_GCC_TOOLCHAIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'OR10NV2_GCC_TOOLCHAIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))' ] ]
)

riscv_gcc = plp.Package(
  name       = 'riscv_gcc',
  path       = 'riscv_gcc',
  modules    = [ riscv_gcc ],
  artifact   = True,
  restrict   = "config.get_str('**/pulp_compiler') == 'gcc' and (config.get_str('**/pe/version') == 'ri5cyv1' or config.get_str('**/pe/version') == 'ri5cy')",
  env        = { 'RISCV_GCC_TOOLCHAIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'RISCV_GCC_TOOLCHAIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
)

openocd = plp.Package(
  name       = 'openocd',
  path       = 'openocd',
  modules    = [ openocd ],
  artifact   = True,
  env        = { 'OPENOCD' : 'self.get_absolute_path()',
                 'OPENOCD_INSTALL_DIR' : 'os.path.join(self.get_absolute_path())'},
  restrict   = "config.get_str('**/platform') == 'fpga' and config.get_str('**/chip/name') == 'pulpissimo'",
  sourceme   = [ [ 'property_eval', 'OPENOCD', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
)

pulp_riscv_gcc = plp.Package(
  name       = 'pulp_riscv_gcc',
  path       = 'pulp_riscv_gcc',
  modules    = [ pulp_riscv_gcc ],
  artifact   = True,
  restrict   = "config.get_str('**/pulp_compiler') == 'gcc' and (config.get_str('**/fc/archi') == 'riscv' or config.get_str('**/pe/archi') == 'riscv')",
  env        = {
    'PULP_RISCV_GCC_TOOLCHAIN_CI' : 'self.get_absolute_path()',
    'PULP_RISCV_GCC_VERSION': '"3"',
    'CROSS_COMPILE' : '"%s/bin/riscv32-unknown-elf-" % self.get_absolute_path()',
    'ZEPHYR_GCC_VARIANT': '"cross-compile"'
  },
  sourceme   = [
    [ 'property_eval', 'PULP_RISCV_GCC_TOOLCHAIN_CI', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'],
    [ 'property_eval', 'CROSS_COMPILE', '"%s/bin/riscv32-unknown-elf-" % self.get_absolute_path()', '"%s/bin/riscv32-unknown-elf-" % os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'],
    [ 'property', 'PULP_RISCV_GCC_VERSION', '3' ],
    [ 'property', 'ZEPHYR_GCC_VARIANT', 'cross-compile' ]
  ],
)

riscv64_gcc = plp.Package(
  name       = 'riscv64_gcc',
  path       = 'riscv64_gcc',
  modules    = [ ],
  artifact   = True,
  restrict   = "config.get_str('**/pulp_compiler') == 'gcc' and config.get_str('**/host/version') == 'ariane'",
  env        = { 'RISCV64_GCC_TOOLCHAIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'RISCV64_GCC_TOOLCHAIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
)

quentin = plp.Package(
  name       = 'quentin',
  path       = 'rtl/quentin',
  modules    = [ quentin ],
  artifact   = False,
  env        = { 'PULP_RTL_QUENTIN' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_QUENTIN', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'quentin'"
)

pulpissimo = plp.Package(
  name       = 'pulpissimo',
  path       = 'rtl/pulpissimo',
  modules    = [ pulpissimo ],
  artifact   = False,
  env        = { 'PULP_RTL_PULPISSIMO' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULPISSIMO', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'pulpissimo'"
)

pulpissimo_ibex = plp.Package(
  name       = 'pulpissimo_ibex',
  path       = 'rtl/pulpissimo_ibex',
  modules    = [ pulpissimo_ibex ],
  artifact   = False,
  env        = { 'PULP_RTL_PULPISSIMO_IBEX' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULPISSIMO_IBEX', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'pulpissimo_ibex'"
)

pulpissimo_v1 = plp.Package(
  name       = 'pulpissimo_v1',
  path       = 'rtl/pulpissimo_v1',
  modules    = [ pulpissimo_v1 ],
  artifact   = False,
  env        = { 'PULP_RTL_PULPISSIMO_V1' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULPISSIMO_V1', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'pulpissimo_v1'"
)

multino = plp.Package(
  name       = 'multino',
  path       = 'rtl/multino',
  modules    = [ multino ],
  artifact   = False,
  env        = { 'PULP_RTL_MULTINO' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_MULTINO', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'multino'"
)

pulp = plp.Package(
  name       = 'pulp',
  path       = 'rtl/pulp',
  modules    = [ pulp ],
  artifact   = False,
  env        = { 'PULP_RTL_PULP' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULP', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'pulp'"
)

pulp_v1 = plp.Package(
  name       = 'pulp_v1',
  path       = 'rtl/pulp_v1',
  modules    = [ pulp_v1 ],
  artifact   = False,
  env        = { 'PULP_RTL_PULP_V1' : 'self.get_absolute_path()'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_PULP_V1', 'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'pulp_v1'"
)

wolfe = plp.Package(
  name       = 'wolfe',
  path       = 'rtl/wolfe',
  modules    = [ wolfe ],
  artifact   = True,
  env        = { 'PULP_RTL_WOLFE' : 'os.path.join(self.get_absolute_path(), "wolfe")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_WOLFE', 'os.path.join(self.get_absolute_path(), "wolfe")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'wolfe'",
  distrib_dep = False
)

arnold = plp.Package(
  name       = 'arnold',
  path       = 'rtl/arnold',
  modules    = [ arnold ],
  artifact   = True,
  env        = { 'PULP_RTL_ARNOLD' : 'os.path.join(self.get_absolute_path(), "arnold")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_ARNOLD', 'os.path.join(self.get_absolute_path(), "arnold")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'arnold'",
  distrib_dep = False
)

devchip = plp.Package(
  name       = 'devchip',
  path       = 'rtl/devchip',
  modules    = [ devchip ],
  artifact   = False,
  env        = { 'PULP_RTL_DEVCHIP' : 'os.path.join(self.get_absolute_path(), "devchip")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_DEVCHIP', 'os.path.join(self.get_absolute_path(), "devchip")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'devchip'"
)

vega = plp.Package(
  name       = 'vega',
  path       = 'rtl/vega',
  modules    = [ vega ],
  artifact   = True,
  env        = { 'PULP_RTL_VEGA' : 'os.path.join(self.get_absolute_path())'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_VEGA', 'os.path.join(self.get_absolute_path())', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'vega'",
  distrib_dep = False
)

gap9 = plp.Package(
  name       = 'gap9',
  path       = 'rtl/gap9',
  modules    = [ gap9 ],
  artifact   = True,
  env        = { 'PULP_RTL_GAP9' : 'os.path.join(self.get_absolute_path())'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_GAP9', 'os.path.join(self.get_absolute_path())', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'gap9'",
  distrib_dep = False
)

gap_rev1 = plp.Package(
  name       = 'gap_rev1',
  path       = 'rtl/gap_rev1',
  modules    = [ gap_rev1 ],
  artifact   = True,
  env        = { 'PULP_RTL_GAP_REV1' : 'os.path.join(self.get_absolute_path(), "gap_rev1")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_GAP_REV1', 'os.path.join(self.get_absolute_path(), "gap_rev1")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'gap_rev1'",
  distrib_dep = False
)

gap8_revc = plp.Package(
  name       = 'gap8_revc',
  path       = 'rtl/gap8_revc',
  modules    = [ gap8_revc ],
  artifact   = True,
  env        = { 'PULP_RTL_GAP8_REVC' : 'os.path.join(self.get_absolute_path(), "gap8_revc")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_GAP8_REVC', 'os.path.join(self.get_absolute_path(), "gap8_revc")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'gap8_revc'",
  distrib_dep = False
)

gap = plp.Package(
  name       = 'gap',
  path       = 'rtl/gap',
  modules    = [ gap ],
  artifact   = True,
  env        = { 'PULP_RTL_GAP' : 'os.path.join(self.get_absolute_path(), "gap")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_GAP', 'os.path.join(self.get_absolute_path(), "gap")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'gap'",
  distrib_dep = False
)

vivosoc2 = plp.Package(
  name       = 'vivosoc2',
  path       = 'rtl/vivosoc2',
  modules    = [ vivosoc2 ],
  artifact   = False,
  env        = { 'PULP_RTL_VIVOSOC2' : 'os.path.join(self.get_absolute_path(), "vivosoc2")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_VIVOSOC2', 'os.path.join(self.get_absolute_path(), "vivosoc2")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'vivosoc2'"
)

fulmine = plp.Package(
  name       = 'fulmine',
  path       = 'rtl/fulmine',
  modules    = [ fulmine ],
  artifact   = False,
  env        = { 'PULP_RTL_FULMINE' : 'os.path.join(self.get_absolute_path(), "fulmine")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_FULMINE', 'os.path.join(self.get_absolute_path(), "fulmine")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'fulmine'"
)

honey = plp.Package(
  name       = 'honey',
  path       = 'rtl/honey',
  modules    = [ honey ],
  artifact   = False,
  env        = { 'PULP_RTL_HONEY' : 'os.path.join(self.get_absolute_path(), "honey")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_HONEY', 'os.path.join(self.get_absolute_path(), "honey")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'honey'"
)

vivosoc3 = plp.Package(
  name       = 'vivosoc3',
  path       = 'rtl/vivosoc3',
  modules    = [ vivosoc3 ],
  artifact   = True,
  env        = { 'PULP_RTL_VIVOSOC3' : 'os.path.join(self.get_absolute_path(), "vivosoc3")'},
  sourceme   = [ [ 'property_eval', 'PULP_RTL_VIVOSOC3', 'os.path.join(self.get_absolute_path(), "vivosoc3")', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'] ],
  restrict   = "config.get_str('**/platform') == 'rtl' and config.get_str('**/chip/name') == 'vivosoc3'",
  distrib_dep = False
)

python_path = os.environ.get('PYTHON_PATH')
if python_path is not None:
  python_path_str = ':' + python_path
else:
  python_path_str = ''

sdk = plp.Package(
  name       = 'sdk',
  path       = 'sdk',
  modules    = [ ],
  groups     = [ platform, runtime, libs, tools, pkg, examples ],
  build_deps = [ plp.PkgDep(or10nv2_gcc), plp.PkgDep(riscv_gcc), plp.PkgDep(pulp_riscv_gcc), plp.PkgDep(openocd)],
  exec_deps  = [ plp.PkgDep(or10nv2_gcc), plp.PkgDep(riscv_gcc), plp.PkgDep(pulp_riscv_gcc), plp.PkgDep(openocd),
                 plp.PkgDep(quentin), plp.PkgDep(pulpissimo_ibex), plp.PkgDep(pulpissimo), plp.PkgDep(pulpissimo_v1), plp.PkgDep(multino), plp.PkgDep(pulp), plp.PkgDep(pulp_v1), plp.PkgDep(gap), plp.PkgDep(gap_rev1), plp.PkgDep(gap8_revc), plp.PkgDep(vivosoc3), plp.PkgDep(wolfe), plp.PkgDep(arnold), plp.PkgDep(vega), plp.PkgDep(gap9), plp.PkgDep(devchip), plp.PkgDep(honey),
                 plp.PkgDep(fulmine), plp.PkgDep(vivosoc2) ],
  artifact   = True,
  env        = { 'PULP_SDK_HOME'       : 'self.get_absolute_path()',
                 'PULP_SDK_INSTALL'    : 'os.path.join(self.get_absolute_path(), "install")',
                 'PULP_SDK_WS_INSTALL' : 'os.path.join(self.get_absolute_path(), "install", "ws")',
                 'TARGET_INSTALL_DIR'    : 'os.path.join(self.get_absolute_path(), "install")',
                 'INSTALL_DIR' : 'os.path.join(self.get_absolute_path(), "install", "ws")',
                 'PYTHONPATH' : 'os.path.join(self.get_absolute_path(), "install", "ws", "python")' + python_path_str,
                 'DEP_DIRS' : 'os.path.join(self.get_absolute_path(), "install", "ws")'
               },
  sourceme   = [ [ 'property_eval', 'PULP_SDK_HOME',       'self.get_absolute_path()', 'os.path.join("$PULP_PROJECT_HOME", self.get_path(no_dev_path=True))'],
                 [ 'property',      'PULP_SDK_INSTALL',    '$PULP_SDK_HOME/install' ],
                 [ 'property',      'PULP_SDK_WS_INSTALL', '$PULP_SDK_HOME/install/ws' ],
                 [ 'sourceme',      '$PULP_SDK_HOME/env/setup.sh', '$PULP_SDK_HOME/env/setup.csh' ],
               ]
)


tests = plp.Package(
  name       = 'tests',
  modules    = [ rt_examples, rt_tests, pmsis_tests, bsp_tests, oprecomp_tests, ml_tests, pulp_tests, gomp_tests, riscv_tests, generic_riscv_tests, sequential_bare_tests, parallel_bare_tests ],
  build_deps = [ plp.PkgDep(sdk) ],
)



c['packages'] = [ or10nv2_gcc, openocd, pulp_riscv_gcc, riscv_gcc, sdk, tests, quentin, multino, pulpissimo_ibex, pulpissimo, pulpissimo_v1, pulp, pulp_v1, gap, gap_rev1, gap8_revc, wolfe, arnold, devchip, vega, gap9, honey, vivosoc3, vivosoc2, fulmine ]




#
# GLOBAL CONFIGURATION
#

c['build_steps'] = plp.BuildSteps([
  plp.BuildStepMap('checkout', ['checkout']),
  plp.BuildStepMap('clean',    ['clean']),
  plp.BuildStepMap('build',    ['prepare', 'build']),
  plp.BuildStepMap('deploy',   ['deploy']),
])

c['artifact_cache'] = '/usr/pack/pulpsdk-1.0-kgf/artifactory'

c['artifactory_servers'] = [
  plp.ArtifactoryServer(name='eth',   url='https://iis-artifactory.ee.ethz.ch/artifactory/release',         ssl_verify=True),
  plp.ArtifactoryServer(name='unibo', url="https://artifactory.eees.dei.unibo.it:8081/artifactory/release", ssl_verify=False),
]

c['system_configs'] = ['configs/pulp.json']

c['root_build_dir'] = 'os.path.join(os.environ.get("PULP_PROJECT_HOME"), "build")'

c['env'] = {'ROOT_BUILD_DIR' : 'os.path.join(os.environ.get("PULP_PROJECT_HOME"), "build")',
           }
