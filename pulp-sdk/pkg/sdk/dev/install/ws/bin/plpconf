#!/usr/bin/env python3

import argparse
import plptree
import json_tools as js
import pulp_config as plpconf
import os
import os.path


parser = argparse.ArgumentParser(description='Generate a user configuration')

parser.add_argument(
    "--output", dest="output", default=None,
    help="Specify output configuration"
)

parser.add_argument(
    "--input", dest="inputs", default=[], action="append",
    help="Specify input configuration"
)

parser.add_argument(
    "--input-file", dest="input_files", default=[], action="append",
    help="Specify input configuration"
)

parser.add_argument(
    "--input-file-noargs", dest="input_files_noargs", default=[], action="append",
    help="Specify input configuration"
)


parser.add_argument(
    "--config", dest="configs", action="append", default=[],
    help="Specify additional configuration item"
)

parser.add_argument(
    "--config-user", dest="configs_user", action="append", default=[],
    help="Specify additional user configuration"
)

args = parser.parse_args()

tree = None

for input_config in args.inputs:

    new_tree = plpconf.get_configs(input_config, ini_configs=args.configs_user, ini_configs_dict={'srcdir':os.getcwd()})[0]
    if tree is None:
        tree = new_tree
    else:
        tree.merge(new_tree)


for input_config in args.input_files:
    new_tree = plptree.get_configs(config_file=input_config, no_args=True)[0]
    if tree is None:
        tree = new_tree
    else:
        tree.merge(new_tree)

for input_config in args.input_files_noargs:
    new_tree = plpconf.get_config(input_config, ini_configs=args.configs_user, ini_configs_dict={'srcdir':os.getcwd()}, interpret=True)
    if tree is None:
        tree = new_tree
    else:
        tree.merge(new_tree)


config = js.import_config(tree.get_dict())

for opt in args.configs:
    key, value = opt.split('=', 1)
    config.user_set(key, value)

try:
    os.makedirs(os.path.dirname(args.output))
except:
    pass

with open(args.output, 'w') as file:
    file.write(config.dump_to_string())
